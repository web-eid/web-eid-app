name: CMake (Ubuntu Linux)

on: [push, pull_request]

env:
  BUILD_TYPE: RelWithDebInfo
  BUILD_NUMBER: ${{github.run_number}}
  QT_QPA_PLATFORM: offscreen
  DEBIAN_FRONTEND: noninteractive
  DEBFULLNAME: GitHub build
  DEBEMAIL: github-action@github

jobs:
  build:
    runs-on: ubuntu-latest
    container: mrts/qt-cmake-gtest-valgrind-ubuntu

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/build
        run: cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: |
          cmake --build . --config $BUILD_TYPE --target installer
          # Debian creates artifacts outside of project dir, copy them back to make them available in the build artifacts
          cp -r ../../web-eid*.* src/app

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: web-eid-app-ubuntu-build-${{github.run_number}}
          path: build/src/app/*.*deb


  coverity:
    name: Run Coverity tests
    if: contains(github.repository, 'web-eid/web-eid-app') && contains(github.ref, 'coverity_scan')
    runs-on: ubuntu-latest
    container: mrts/qt-cmake-gtest-valgrind-ubuntu

    env:
      TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
      PROJECTNAME: 'web-eid/web-eid-app'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/build
        run: cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..

      - name: Download Coverity Build Tool
        working-directory: ${{github.workspace}}/build
        run: |
          curl --silent --data "token=$TOKEN&project=$PROJECTNAME" -o cov-analysis-linux64.tar.gz https://scan.coverity.com/download/cxx/linux64
          mkdir cov-analysis-linux64
          tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: |
          export PATH=$PWD/cov-analysis-linux64/bin:$PATH
          cov-build --dir cov-int cmake --build . --config $BUILD_TYPE

      - name: Submit the result to Coverity Scan
        working-directory: ${{github.workspace}}/build
        run: |
          export PATH=$PWD/cov-analysis-linux64/bin:$PATH
          tar czvf upload.tgz cov-int
          curl --silent \
            --form project=$PROJECTNAME \
            --form token=$TOKEN \
            --form email=eid-teenusehaldus@ria.ee \
            --form file=@upload.tgz \
            --form version=master \
            --form description="Github Actions CI build" \
            https://scan.coverity.com/builds?project=$PROJECTNAME
