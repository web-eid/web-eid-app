name: CMake (Ubuntu Linux)

on: [push, pull_request]

env:
  BUILD_TYPE: RelWithDebInfo
  BUILD_NUMBER: ${{github.run_number}}
  QT_QPA_PLATFORM: offscreen
  DEBIAN_FRONTEND: noninteractive
  DEBFULLNAME: GitHub build
  DEBEMAIL: github-action@github
  CMAKE_BUILD_PARALLEL_LEVEL: 3

jobs:
  build:
    runs-on: ubuntu-latest
    container: ${{matrix.container}}
    strategy:
      matrix:
        container: ['ubuntu:20.04', 'ubuntu:22.04']
        include:
        - container: 'ubuntu:20.04'
          name: ubuntu2004
        - container: 'ubuntu:22.04'
          name: ubuntu2204

    steps:
      - name: Install dependencies
        if: matrix.container == 'ubuntu:20.04'
        run: apt update -qq && apt install --no-install-recommends -y git lsb-release fakeroot build-essential devscripts debhelper pkg-config cmake libpcsclite-dev libssl-dev libgtest-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev

      - name: Install dependencies
        if: matrix.container != 'ubuntu:20.04'
        run: apt update -qq && apt install --no-install-recommends -y git lsb-release fakeroot build-essential devscripts debhelper pkg-config cmake libpcsclite-dev libssl-dev libgtest-dev libgl-dev libqt6svg6-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools libqt6core5compat6-dev

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B build -S .

      - name: Build
        run: |
          cmake --build build --config $BUILD_TYPE --target installer
          # Debian creates artifacts outside of project dir, copy them back to make them available in the build artifacts
          cp -r ../web-eid*.* build/src/app

      - uses: actions/upload-artifact@v4
        with:
          name: web-eid-app-ubuntu-build-${{matrix.name}}-${{github.run_number}}
          path: build/src/app/*.*deb
